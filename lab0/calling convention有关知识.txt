Calling convention定义了如何调用和返回函数的规则，这包括参数如何传递、返回值如何处理以及寄存器的使用等等。不同的编程语言和操作系统可能会有不同的calling convention。下面是一些常见的calling convention的规则。

1. **参数传递：** 这通常分为两种方法，一种是通过栈传递，另一种是通过寄存器传递。在通过栈传递的方式中，调用函数将参数推入栈中，被调用函数则从栈中弹出参数。在通过寄存器传递的方式中，调用函数将参数存入寄存器中，被调用函数则从寄存器中读取参数。

2. **返回值传递：** 通常通过特定的寄存器（如RISC-V的a0寄存器）来传递返回值。

3. **函数返回地址：** 当函数被调用时，通常需要保存返回地址，以便函数执行完后可以返回到正确的位置。在RISC-V中，这是通过使用"jal"指令并将返回地址保存在ra寄存器中实现的。

4. **寄存器保存：** Calling convention还规定了哪些寄存器需要在函数调用前后保存和恢复。这通常分为callee-saved寄存器和caller-saved寄存器。前者是被调用函数需要保存和恢复的寄存器，后者是调用函数需要保存和恢复的寄存器。

具体到RISC-V的calling convention，以下是一些主要的规定：

- 参数传递：前8个整数和指针参数通过a0-a7寄存器传递，更多的参数通过栈传递。
- 返回值传递：整数和指针的返回值通过a0和a1寄存器传递。
- 寄存器保存：s0-s11是callee-saved寄存器，a0-a7和t0-t6是caller-saved寄存器。

需要注意的是，不同的编译器和操作系统可能会有自己的calling convention。在编写汇编代码或者理解编译器生成的代码时，需要了解并遵守相关的calling convention。